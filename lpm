#!/usr/bin/env python3
#Installs a dependency with all its dependencies
import sys, os
import argparse
import subprocess
import multiprocessing
import stat
from lms_dm import install_utils

def checkIfDirIsPackage(path):
    packageFile = path+'/lms_package.json'
    if not os.path.isfile(packageFile):
        return False;
    return True;


def getPurePackageName(packageFull):
    return packageFull.split(":")[0]

def getPackageManagerDir():
    return os.path.expanduser('~/.lms/lms_pm/')
    
def getPackageManagerGlobalDependencyDir():
    return os.path.join(getPackageManagerDir(),"dependencies")
    
def get_immediate_subdirectories(a_dir):
    return [name for name in os.listdir(a_dir)
            if os.path.isdir(os.path.join(a_dir, name))]

def getCMakeCallCompileDependencyMessage(packageDir):
    return 'add_subdirectory({0})'.format(os.path.abspath(packageDir))

def isPackageInstalledGlobally(package):
    packageName = getPurePackageName(package)
    if os.path.isdir(os.path.join(getPackageManagerGlobalDependencyDir(),packageName)):
        return True
    return False

def collectPackageWithDependencies(packageFull, dependencyDir):
    """Installs (prepares) the package (downloads it or creates symlink), same for each dependency
    """
    
    packageNameParts = packageFull.split(":")
    package = packageNameParts[0]
    print("installing package {0} with parameters {1}".format(package,packageNameParts))

    packageUrl = install_utils.getPackageUrlFromName(package)

    #check if a url was set
    if packageUrl == None:
        print('Package not found: '+package)
        sys.exit(1)

    print(packageUrl)

    #install package
    install_utils.installPackage(package,packageUrl,packageNameParts,dependencyDir=dependencyDir)
    
    #get dependencies
    dependencies = install_utils.getPackageDependencies(dependencyDir+'/'+package)
    print("DEPENDENCIES: {0}".format(dependencies))
    if dependencies is not None:
        for dependency in dependencies:
            #check if dependency is installed globally
            if isPackageInstalledGlobally(dependency) and dependencyDir != getPackageManagerGlobalDependencyDir():
                print("package already installed globally: " + dependency)
            else:
                print("installing dependency: {0}".format(dependency)) 
                collectPackageWithDependencies(dependency,dependencyDir)
                #TODO check if dependency was already added, if not create cmake file for it


def getTargetIncludeString(target, includelist):
    return 'target_include_directories({0} PUBLIC {1})'.format(target,' '.join(includelist))


def getStringForPackageIncludes(packageName, dependencyDir, globalHack = False):
    #each package has one or more binary/target, we have to catch them all!
    targets = install_utils.getPackageTargets(packageName,dependencyDir)
    print("found targets: {0}".format(targets))
    dependencies = install_utils.getPackageDependencies(os.path.join(dependencyDir,packageName),True)
    #get includes for the dependencies
    includeList = list()
    for dependency in dependencies:
        if isPackageInstalledGlobally(dependency) and not globalHack:
            continue
        for tmp in install_utils.getPackageIncludes(os.path.join(dependencyDir,dependency)):
            includeList.append(tmp)
    if len(includeList) == 0:
        return ""
    res = ""
    for target in targets:
        res += getTargetIncludeString(target,includeList) + '\n'
    return res

def downloadAndCreateCMake(package, installDir=''):
    """install package in <installDir>dependencies
    """
    isGlobal = installDir == getPackageManagerDir()
    dependencyDir = os.path.join(installDir,'dependencies')
    collectPackageWithDependencies(package,dependencyDir)
    print("installing Done")

    #get all package-dependencies
    packageHierarchyList = dict()
    for subdir in get_immediate_subdirectories(dependencyDir):
        if not checkIfDirIsPackage(dependencyDir+'/'+subdir):
            print("invalid dir given: "+subdir)
            continue;
        #ignore package parameters as we can't compile two times the same package with different versions (targetName fails)  
        result=install_utils.getPackageDependencies(dependencyDir+'/'+subdir, True)  
        #remove globally installed packages
        for tmp in result:
            if isPackageInstalledGlobally(tmp):
                result.remove(tmp)
        packageHierarchyList[subdir] = result

    print(packageHierarchyList)


    #generate hierarchy CMake
    cmakeFile = os.path.join(installDir,'CMakeLists.txt')
    print("CMAKE FILE: "+cmakeFile)
    #os.makedirs('lms_cmake',exist_ok=True) 
    with open(cmakeFile,'w') as file:
        file.write('cmake_minimum_required(VERSION 2.8) \n')
        file.write('project(TODO) \n') # TODO get the current dirname
        
        file.write('include(customCMake.txt) \n')
        packageHierarchyListCopy = packageHierarchyList.copy()

        file.write('\n \n#package compile hierachy \n')
        lastSize = len(packageHierarchyListCopy)
        while len(packageHierarchyListCopy) > 0:
            for packageDependencies in list(packageHierarchyListCopy):
                installedGlobally = isPackageInstalledGlobally(packageDependencies)
                if isGlobal:
                    installedGlobally = False #TODO Hack to enable installation of global packages....
                print(packageDependencies+" installedGlobally: {0}".format(installedGlobally))
                if len(packageHierarchyListCopy[packageDependencies]) == 0 or installedGlobally:
                    if not installedGlobally:
                        file.write(getCMakeCallCompileDependencyMessage(dependencyDir+'/'+packageDependencies)+'\n')
                    #remove it from all other lists
                    packageHierarchyListCopy.pop(packageDependencies)
                    for tmp in packageHierarchyListCopy:
                        if packageDependencies in packageHierarchyListCopy[tmp]:
                            packageHierarchyListCopy[tmp].remove(packageDependencies)
            if lastSize == len(packageHierarchyListCopy):
                #TODO error handling if there is a closed loop :D
                print("Your dependencies have a closed loop! {0}".format(packageHierarchyListCopy))
                sys.exit(1)
            lastSize = len(packageHierarchyListCopy)

        file.write('\n\n#target include paths \n')
        for package in list(packageHierarchyList):
            s = getStringForPackageIncludes(package,dependencyDir,globalHack=isGlobal) #TODO packageName
            if len(s) != 0:
                file.write(s)
    #generatre custom CMake file
    customCmake = os.path.join(installDir,'customCMake.txt')
    if not os.path.isfile(customCmake): 
        with open(customCmake,'w') as file:
            file.write("#Add your cmake stuff here")
            #
    
    print("Done")

def prepareGlobally(package):
    #install package globally
    downloadAndCreateCMake(package,getPackageManagerDir())
    return getPackageManagerDir()

def prepareLocally(package):
    downloadAndCreateCMake(package)
    return ''

def askForPermission(text):
    return install_utils.query_yes_no(text)

def checkEnvironmentVariable(key,value):
   # isSet = False
    #envString = '';
    if key in os.environ:
        envString = os.environ[key]
        envString = envString+':'
        pathsplit = envString.split(':')
        if value in pathsplit:
            return True
    return False
    #if not isSet:
    #    print(envString)
    #    if askForPermission('Missing env: <key>:<value> '+key +':'+value):
    #        envString = envString+value
    #        os.environ[key] = envString
    #        print('env changed')
    #    else:
    #        print("env NOT changed")

def checkEnviromentVariables():
    packageManagerDir = os.path.expanduser('~/.lms/package_manager/')
    #http://stackoverflow.com/questions/5971635/setting-reading-up-environment-variables-in-python
    #check PATH
    #export PATH="$PATH:~/.lms/package_manager/bin"
    pathDir = os.path.join(packageManagerDir,'bin')
    cpathDir = os.path.join(packageManagerDir,'include')
    ldpathDir = os.path.join(packageManagerDir,'lib')

    anyMissing=False
    missing = checkEnvironmentVariable('PATH',pathDir)
    if missing:
        anyMissing = True
        print("PATH NOT set correctly")
    missing = checkEnvironmentVariable('CPATH',cpathDir)
    if missing:
        anyMissing = True
        print("CPATH NOT set correctly")
    missing = checkEnvironmentVariable('LD_LIBRARY_PATH',ldpathDir)
    if missing:
        anyMissing = True
        print("LD_LIBRARY_PATH NOT set correctly")
    
    #Ask to add missing env variables
    #TODO os check http://stackoverflow.com/questions/1854/python-what-os-am-i-running-on
    #UNIX
    profileFile = os.path.expanduser('~/.profile')
    lmsbash = os.path.join(getPackageManagerDir(),'.bashrc')
    if os.path.isfile(profileFile):
        #check if file exists
        if not os.path.isfile(lmsbash):
            with open(lmsbash,'w') as file:
                file.write("""export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:"""+os.path.join(getPackageManagerDir(),'lib')+""""
export PATH="$PATH:"""+os.path.join(getPackageManagerDir(),'bin')+""""
export CPATH="$CPATH:"""+os.path.join(getPackageManagerDir(),'include')+"\"")
        
        alreadyAdded = False
        with open(profileFile,'r') as file:
            fileRead = file.read()
            if lmsbash in fileRead:
                print("already added, you may have to relog/restart")
                alreadyAdded = True
            else:
                print("Missing environment variables")

        if not alreadyAdded:
            with open(profileFile,'a') as file:
                #TODO ask the user
                print('you can add it to ~/.profile')
                file.write('\n #automatically added by the lms package manager\n')
                file.write('. "'+lmsbash+"\"")
                print("call <exec bash> to reload changes (might not work, just reboot)")
                
    else:
        print('please include bash file yourself (add . "'+lmsbash+'" to your bashrc or HOME/.profile)')

    
    #WIN TODO
    print("TODO")

def printPackageList():
    data = install_utils.getPackageList()
    #TODO alphabetisch sortieren
    for listFile in data:
        print("file: "+listFile)
        for package in data[listFile]:
            print(package + "   " + data[listFile][package]['description'])


#RUNNING CODE
#configure argument parser
main_parser = argparse.ArgumentParser(description='Process package command.', add_help=True)
main_parser.add_argument('-l','--list', dest='listPackages', help='lists all available packages', action='store_true')
main_parser.add_argument('-e','--environment', dest='environment', help='checks environment variables', action='store_true')
main_parser.add_argument('-cs','--createlmsscript', dest='createlmsscript', help='creates start script for lms', action='store_true')
subparser = main_parser.add_subparsers(help='sub-command help')

parser = subparser.add_parser("install",description='Process install command.')
parser.add_argument('package', help='packageName with extensions')
parser.add_argument('-g','--global', dest='installGlobally', help='install package globally', action='store_true')
parser.add_argument('-m','--make', dest='make', help='run cmake and make', action='store_true')

#parse args
resultArgs = main_parser.parse_args()
#print(resultArgs)
if "package" in resultArgs:
    print(resultArgs.package)
    installDir = ''
    if resultArgs.installGlobally:
        installDir = prepareGlobally(resultArgs.package)
        #TODO generate cmake for make install
    else:
        installDir = prepareLocally(resultArgs.package)

#compile it if required
if "make" in resultArgs:
    if resultArgs.make:
        #create build dir
        buildDir = os.path.join(installDir,'build')
        os.makedirs(buildDir,exist_ok=True)
        p = subprocess.Popen(['cmake', '..'], cwd=buildDir)
        output, err = p.communicate()
        if err is not None:
            print(output)
            print("cmake failed")   
            sys.exit(1)

        if resultArgs.installGlobally:
            print("MAKE dir: "+buildDir)
            p = subprocess.Popen(['make','-j{0}'.format(multiprocessing.cpu_count())], cwd=buildDir)      
        else:
            print("MAKE dir: "+buildDir)
            print('make -j{0}'.format(multiprocessing.cpu_count()))
            p = subprocess.Popen(['make','-j{0}'.format(multiprocessing.cpu_count())], cwd="build")
        output, err = p.communicate()
        if err is not None:
            print(output)
            print("make failed")
            sys.exit(1)

#check environment Variables
if resultArgs.environment:
    checkEnviromentVariables()

if resultArgs.listPackages:
    printPackageList()

#create lms start script
if resultArgs.createlmsscript:
    #create lms start script
    #TODO use template
    lmsStartScriptFile = "lms"
    lmsStartScript = """#!/bin/bash
    #lms start script
    export LMS_CONFIG_PATH="$CONFIGS:"""+os.path.abspath("config")+""""
    export LMS_MODULE_PATH="$MODULES:"""+os.path.abspath("dependencies/bin")+""":""" + os.path.expanduser(os.path.join(getPackageManagerDir(),"dependencies/bin"))+""""
    lms $@
    """
    with open(lmsStartScriptFile,'w') as file:
        file.write(lmsStartScript)

    #make it executable
    st = os.stat('lms')
    os.chmod('lms', st.st_mode | stat.S_IEXEC)
