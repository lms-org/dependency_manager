#!/usr/bin/env python3
#Installs a dependency with all its dependencies
import sys, os
import argparse
import subprocess
import multiprocessing
import stat
#import tempfile
from lms_dm import install_utils
from lms_dm import package_manager
from lms_dm import package


#configure argument parser
main_parser = argparse.ArgumentParser(description='Process package command.', add_help=True)
main_parser.add_argument('-l','--list', dest='listPackages', help='lists all available packages', action='store_true')
main_parser.add_argument('-e','--environment', dest='environment', help='checks environment variables', action='store_true')
main_parser.add_argument('-cs','--createlmsscript', dest='createlmsscript', help='creates start script for lms', action='store_true')
subparser = main_parser.add_subparsers(help='sub-command help')

parser = subparser.add_parser("install",description='Process install command.')
parser.add_argument('package', help='packageName with extensions')
parser.add_argument('-g','--global', dest='installGlobally', help='install package globally (make will be called)', action='store_true')
parser.add_argument('-m','--make', dest='make', help='run cmake and make', action='store_true')

#parse args
resultArgs = main_parser.parse_args()
#print(resultArgs)
if "package" in resultArgs:
    if resultArgs.installGlobally:
        workingdir = package_manager.getDir()
    else:
        workingdir = os.path.abspath('')
    p = package.Package(resultArgs.package,workingdir)
    p.downloadWithDependencies(False)
    #create CMake
    p.generateCMake()

    #compile it if required
    if resultArgs.make or resultArgs.installGlobally:
        #create build dir
        buildDir = os.path.join(workingdir,'build')
        os.makedirs(buildDir,exist_ok=True)
        p = subprocess.Popen(['cmake', '..'], cwd=buildDir)
        output, err = p.communicate()
        if err is not None:
            print(output)
            print("cmake failed")   
            sys.exit(1)

        if resultArgs.installGlobally:
            print("MAKE dir: "+buildDir)
            p = subprocess.Popen(['make','-j{0}'.format(multiprocessing.cpu_count())], cwd=buildDir)      
        else:
            print("MAKE dir: "+buildDir)
            print('make -j{0}'.format(multiprocessing.cpu_count()))
            p = subprocess.Popen(['make','-j{0}'.format(multiprocessing.cpu_count())], cwd="build")
        output, err = p.communicate()
        if err is not None:
            print(output)
            print("make failed")
            sys.exit(1)

#check environment Variables
if resultArgs.environment:
    package_manager.checkEnviromentVariables()

if resultArgs.listPackages:
    package_manager.printPackageList()

#create lms start script
if resultArgs.createlmsscript:
    #create lms start script
    #TODO use template
    lmsStartScriptFile = "lms"
    lmsStartScript = """#!/bin/bash
    #lms start script
    export LMS_CONFIG_PATH="$CONFIGS:"""+os.path.abspath("config")+""""
    export LMS_MODULE_PATH="$MODULES:"""+os.path.abspath("dependencies/bin")+""":""" + os.path.expanduser(os.path.join(getPackageManagerDir(),"dependencies/bin"))+""""
    lms $@
    """
    with open(lmsStartScriptFile,'w') as file:
        file.write(lmsStartScript)

    #make it executable
    st = os.stat('lms')
    os.chmod('lms', st.st_mode | stat.S_IEXEC)
